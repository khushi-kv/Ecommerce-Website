{"ast":null,"code":"import React from 'react';\nimport { createSlice } from '@reduxjs/toolkit';\n// for local storage of data\nconst fetchFromLocalStorage = () => {\n  let cart = localStorage.getItem('cart');\n  if (cart) {\n    var _product;\n    console.log((_product = product) === null || _product === void 0 ? void 0 : _product.quantity);\n    return JSON.parse(localStorage.getItem('cart'));\n  } else {\n    return [];\n  }\n};\nconst storeInLocalStorage = data => {\n  localStorage.setItem('cart', JSON.stringify(data));\n  console.log(\"stored\");\n};\nconst initialState = {\n  carts: fetchFromLocalStorage(),\n  itemsCount: 0,\n  totalAmount: 0,\n  isCartMessageOn: false\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      const isItemInCart = state.carts.find(item => item.id === action.payload.id);\n      if (isItemInCart) {\n        const tempCart = state.carts.map(item => {\n          if (item.id === action.payload.id) {\n            let tempQty = item.quantity + action.payload.quantity;\n            let tempTotalPrice = tempQty * item.price;\n            return {\n              ...item,\n              quantity: tempQty,\n              totalPrice: tempTotalPrice\n            };\n          } else {\n            return item;\n          }\n        });\n        state.carts = tempCart;\n        storeInLocalStorage(state.carts);\n      } else {\n        state.carts.push(action.payload);\n        storeInLocalStorage(state.carts);\n      }\n    }\n  }\n});\nexport const {\n  addToCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["React","createSlice","fetchFromLocalStorage","cart","localStorage","getItem","console","log","product","quantity","JSON","parse","storeInLocalStorage","data","setItem","stringify","initialState","carts","itemsCount","totalAmount","isCartMessageOn","cartSlice","name","reducers","addToCart","state","action","isItemInCart","find","item","id","payload","tempCart","map","tempQty","tempTotalPrice","price","totalPrice","push","actions","reducer"],"sources":["/Users/khushiverma/Desktop/Ecommerce-Website/shoppingcart/src/store/CartSlice.js"],"sourcesContent":["import React from 'react'\nimport { createSlice } from '@reduxjs/toolkit'\n// for local storage of data\nconst fetchFromLocalStorage = () => {\n    let cart = localStorage.getItem('cart');\n    if(cart){\n        console.log(product?.quantity);\n        return JSON.parse(localStorage.getItem('cart'));\n       \n    } else {\n        return [];\n    }\n}\nconst storeInLocalStorage = (data) => {\n    localStorage.setItem('cart', JSON.stringify(data));\n    console.log(\"stored\");\n}\nconst initialState={\ncarts:fetchFromLocalStorage(),\nitemsCount:0,\ntotalAmount:0,\nisCartMessageOn:false\n}\nconst cartSlice=createSlice({\n    name:'cart',\n    initialState,\n    reducers:{\n        addToCart:(state,action)=>{\n            const isItemInCart=state.carts.find(item=>\n                item.id===action.payload.id);\n            \n                if(isItemInCart){\n                    const tempCart=state.carts.map(item=>{\n                        if(item.id===action.payload.id){\n                            let tempQty = item.quantity + action.payload.quantity;\n                        let tempTotalPrice = tempQty * item.price;\n\n                            return {\n                                ...item, quantity: tempQty, totalPrice: tempTotalPrice\n                            }\n\n                        }\n                        else{\n                            return item;\n                        }\n                    })\n                    state.carts=tempCart;\n                    storeInLocalStorage(state.carts);\n                }\n                else{\n                    state.carts.push(action.payload);\n                    storeInLocalStorage(state.carts);\n                }\n          \n        }\n    }\n})\nexport const {addToCart}=cartSlice.actions;\nexport default cartSlice.reducer;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C;AACA,MAAMC,qBAAqB,GAAG,MAAM;EAChC,IAAIC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EACvC,IAAGF,IAAI,EAAC;IAAA;IACJG,OAAO,CAACC,GAAG,aAACC,OAAO,6CAAP,SAASC,QAAQ,CAAC;IAC9B,OAAOC,IAAI,CAACC,KAAK,CAACP,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;EAEnD,CAAC,MAAM;IACH,OAAO,EAAE;EACb;AACJ,CAAC;AACD,MAAMO,mBAAmB,GAAIC,IAAI,IAAK;EAClCT,YAAY,CAACU,OAAO,CAAC,MAAM,EAAEJ,IAAI,CAACK,SAAS,CAACF,IAAI,CAAC,CAAC;EAClDP,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;AACzB,CAAC;AACD,MAAMS,YAAY,GAAC;EACnBC,KAAK,EAACf,qBAAqB,EAAE;EAC7BgB,UAAU,EAAC,CAAC;EACZC,WAAW,EAAC,CAAC;EACbC,eAAe,EAAC;AAChB,CAAC;AACD,MAAMC,SAAS,GAACpB,WAAW,CAAC;EACxBqB,IAAI,EAAC,MAAM;EACXN,YAAY;EACZO,QAAQ,EAAC;IACLC,SAAS,EAAC,CAACC,KAAK,EAACC,MAAM,KAAG;MACtB,MAAMC,YAAY,GAACF,KAAK,CAACR,KAAK,CAACW,IAAI,CAACC,IAAI,IACpCA,IAAI,CAACC,EAAE,KAAGJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;MAE5B,IAAGH,YAAY,EAAC;QACZ,MAAMK,QAAQ,GAACP,KAAK,CAACR,KAAK,CAACgB,GAAG,CAACJ,IAAI,IAAE;UACjC,IAAGA,IAAI,CAACC,EAAE,KAAGJ,MAAM,CAACK,OAAO,CAACD,EAAE,EAAC;YAC3B,IAAII,OAAO,GAAGL,IAAI,CAACpB,QAAQ,GAAGiB,MAAM,CAACK,OAAO,CAACtB,QAAQ;YACzD,IAAI0B,cAAc,GAAGD,OAAO,GAAGL,IAAI,CAACO,KAAK;YAErC,OAAO;cACH,GAAGP,IAAI;cAAEpB,QAAQ,EAAEyB,OAAO;cAAEG,UAAU,EAAEF;YAC5C,CAAC;UAEL,CAAC,MACG;YACA,OAAON,IAAI;UACf;QACJ,CAAC,CAAC;QACFJ,KAAK,CAACR,KAAK,GAACe,QAAQ;QACpBpB,mBAAmB,CAACa,KAAK,CAACR,KAAK,CAAC;MACpC,CAAC,MACG;QACAQ,KAAK,CAACR,KAAK,CAACqB,IAAI,CAACZ,MAAM,CAACK,OAAO,CAAC;QAChCnB,mBAAmB,CAACa,KAAK,CAACR,KAAK,CAAC;MACpC;IAER;EACJ;AACJ,CAAC,CAAC;AACF,OAAO,MAAM;EAACO;AAAS,CAAC,GAACH,SAAS,CAACkB,OAAO;AAC1C,eAAelB,SAAS,CAACmB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}