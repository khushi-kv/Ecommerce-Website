{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst fetchFromLocalStorage = () => {\n  let cart = localStorage.getItem(\"cart\");\n  if (cart) {\n    // console.log(\"fetch\");\n    return JSON.parse(localStorage.getItem(\"cart\"));\n  } else {\n    return [];\n  }\n};\nconst storeInLocalStorage = data => {\n  localStorage.setItem(\"cart\", JSON.stringify(data));\n  console.log(data);\n};\nconst initialState = {\n  carts: fetchFromLocalStorage(),\n  itemsCount: 0,\n  totalAmount: 0,\n  isCartMessageOn: false\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      const isItemInCart = state.carts.find(item => item.id === action.payload.id);\n      if (isItemInCart) {\n        const tempCart = state.carts.map(item => {\n          if (item.id === action.payload.id) {\n            let tempQty = item.quantity + action.payload.quantity;\n            let tempTotalPrice = tempQty * item.price;\n            return {\n              ...item,\n              quantity: tempQty,\n              totalPrice: tempTotalPrice\n            };\n          } else {\n            return item;\n          }\n        });\n        state.carts = tempCart;\n        storeInLocalStorage(state.carts);\n      } else {\n        state.carts.push(action.payload);\n        storeInLocalStorage(state.carts);\n      }\n    },\n    removeFromCart: (state, action) => {\n      const tempCart = state.carts.filter(item => item.id !== action.payload);\n      state.carts = tempCart;\n      storeInLocalStorage(state.carts);\n    },\n    clearCart: state => {\n      state.carts = [];\n      storeInLocalStorage(state.carts);\n    },\n    getCartTotal: state => {\n      state.totalAmount = state.carts.reduce((cartTotal, cartItem) => {\n        return cartTotal += cartItem.totalPrice;\n      }, 0);\n      state.itemsCount = state.carts.length;\n    },\n    toggleCartQty: (state, action) => {\n      const tempCart = state.carts.map(item => {\n        if (item.id === action.payload.id) {\n          let tempQty = item.quantity;\n          let tempTotalPrice = item.totalPrice;\n          if (action.payload.type === \"INC\") {\n            tempQty++;\n            if (tempQty === item.stock) tempQty = item.stock;\n            tempTotalPrice = tempQty * item.discountedPrice;\n          }\n          if (action.payload.type === \"DEC\") {\n            tempQty--;\n            if (tempQty < 1) tempQty = 1;\n            tempTotalPrice = tempQty * item.discountedPrice;\n          }\n          return {\n            ...item,\n            quantity: tempQty,\n            totalPrice: tempTotalPrice\n          };\n        } else {\n          return item;\n        }\n      });\n      state.carts = tempCart;\n      storeInLocalStorage(state.carts);\n    },\n    setCartMessageOn: state => {\n      state.isCartMessageOn = true;\n    },\n    setCartMessageOff: state => {\n      state.isCartMessageOn = false;\n    }\n  }\n});\nexport const {\n  addToCart,\n  setCartMessageOn,\n  setCartMessageOff,\n  getCartTotal,\n  removeFromCart,\n  toggleCartQty,\n  clearCart\n} = cartSlice.actions;\nexport const getAllCarts = state => state.cart.carts;\nexport const getCartItemsCount = state => state.cart.itemsCount;\nexport const getCartMessageStatus = state => state.cart.isCartMessageOn;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","fetchFromLocalStorage","cart","localStorage","getItem","JSON","parse","storeInLocalStorage","data","setItem","stringify","console","log","initialState","carts","itemsCount","totalAmount","isCartMessageOn","cartSlice","name","reducers","addToCart","state","action","isItemInCart","find","item","id","payload","tempCart","map","tempQty","quantity","tempTotalPrice","price","totalPrice","push","removeFromCart","filter","clearCart","getCartTotal","reduce","cartTotal","cartItem","length","toggleCartQty","type","stock","discountedPrice","setCartMessageOn","setCartMessageOff","actions","getAllCarts","getCartItemsCount","getCartMessageStatus","reducer"],"sources":["/Users/khushiverma/Desktop/Ecommerce-Website/src/store/CartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst fetchFromLocalStorage = () => {\n  let cart = localStorage.getItem(\"cart\");\n  if (cart) {\n    // console.log(\"fetch\");\n    return JSON.parse(localStorage.getItem(\"cart\"));\n  } else {\n    return [];\n  }\n};\n\nconst storeInLocalStorage = (data) => {\n  localStorage.setItem(\"cart\", JSON.stringify(data));\n  console.log(data);\n};\nconst initialState = {\n  carts: fetchFromLocalStorage(),\n  itemsCount: 0,\n  totalAmount: 0,\n  isCartMessageOn: false,\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      const isItemInCart = state.carts.find(\n        (item) => item.id === action.payload.id\n      );\n\n      if (isItemInCart) {\n        const tempCart = state.carts.map((item) => {\n          if (item.id === action.payload.id) {\n            let tempQty = item.quantity + action.payload.quantity;\n            let tempTotalPrice = tempQty * item.price;\n\n            return {\n              ...item,\n              quantity: tempQty,\n              totalPrice: tempTotalPrice,\n            };\n          } else {\n            return item;\n          }\n        });\n        state.carts = tempCart;\n        storeInLocalStorage(state.carts);\n      } else {\n        state.carts.push(action.payload);\n        storeInLocalStorage(state.carts);\n      }\n    },\n    \n    removeFromCart: (state, action) => {\n      const tempCart = state.carts.filter(item => item.id !== action.payload);\n      state.carts = tempCart;\n      storeInLocalStorage(state.carts);\n  },\n\n    clearCart: (state) => {\n      state.carts = [];\n      storeInLocalStorage(state.carts);\n    },\n    getCartTotal: (state) => {\n      state.totalAmount = state.carts.reduce((cartTotal, cartItem) => {\n        return (cartTotal += cartItem.totalPrice);\n      }, 0);\n      state.itemsCount = state.carts.length;\n    },\n    toggleCartQty: (state, action) => {\n      const tempCart = state.carts.map((item) => {\n        if (item.id === action.payload.id) {\n          let tempQty = item.quantity;\n          let tempTotalPrice = item.totalPrice;\n\n          if (action.payload.type === \"INC\") {\n            tempQty++;\n            if (tempQty === item.stock) tempQty = item.stock;\n            tempTotalPrice = tempQty * item.discountedPrice;\n          }\n          if (action.payload.type === \"DEC\") {\n            tempQty--;\n            if (tempQty < 1) tempQty = 1;\n            tempTotalPrice = tempQty * item.discountedPrice;\n          }\n          return { ...item, quantity: tempQty, totalPrice: tempTotalPrice };\n        } else {\n          return item;\n        }\n      });\n      state.carts = tempCart;\n      storeInLocalStorage(state.carts);\n    },\n    setCartMessageOn: (state) => {\n      state.isCartMessageOn = true;\n    },\n    setCartMessageOff: (state) => {\n      state.isCartMessageOn = false;\n    },\n  },\n});\n\nexport const {\n  addToCart,\n  setCartMessageOn,\n  setCartMessageOff,\n  getCartTotal,\n  removeFromCart,\n  toggleCartQty,\n  clearCart,\n} = cartSlice.actions;\nexport const getAllCarts = (state) => state.cart.carts;\nexport const getCartItemsCount = (state) => state.cart.itemsCount;\nexport const getCartMessageStatus = (state) => state.cart.isCartMessageOn;\nexport default cartSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}