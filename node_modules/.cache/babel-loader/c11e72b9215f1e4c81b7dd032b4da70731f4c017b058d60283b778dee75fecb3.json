{"ast":null,"code":"// import {createSlice} from \"@reduxjs/toolkit\";\n\n// const fetchFromLocalStorage = () => {\n//     let cart = localStorage.getItem('cart');\n//     if(cart){\n//         // console.log(\"fetch\");\n//         return JSON.parse(localStorage.getItem('cart'));\n//     } else {\n//         return [];\n//     }\n// }\n// const storeInLocalStorage = (data) => {\n\n//     localStorage.setItem('cart', JSON.stringify(data));\n//     // console.log(data);\n// }\n\n// const initialState = {\n//     carts: fetchFromLocalStorage(),\n//     itemsCount: 0,\n//     totalAmount: 0,\n//     isCartMessageOn: false\n// }\n\n// const cartSlice = createSlice({\n//     name: 'cart',\n//     initialState,\n//     reducers: {\n//         addToCart: (state, action) => {\n//             const isItemInCart = state.carts.find(item => item.id === action.payload.id);\n\n//             if(isItemInCart){\n//                 const tempCart = state.carts.map(item => {\n//                     if(item.id === action.payload.id){\n//                         let tempQty = item.quantity + action.payload.quantity;\n//                         let tempTotalPrice = tempQty * item.price;\n\n//                         return {\n//                             ...item, quantity: tempQty, totalPrice: tempTotalPrice\n//                         }\n//                     } else {\n//                         return item;\n//                     }\n//                 });\n\n//                 state.carts = tempCart;\n//                 storeInLocalStorage(state.carts);\n//             } else {\n//                 state.carts.push(action.payload);\n//                 storeInLocalStorage(state.carts);\n//             }\n//         },\n//     }\n// })\n// export const {addToCart}=cartSlice.actions;\n// export default cartSlice.reducer;","map":{"version":3,"names":[],"sources":["/Users/khushiverma/Desktop/Ecommerce-Website/shoppingcart/src/store/CartSlice.js"],"sourcesContent":["// import {createSlice} from \"@reduxjs/toolkit\";\n\n// const fetchFromLocalStorage = () => {\n//     let cart = localStorage.getItem('cart');\n//     if(cart){\n//         // console.log(\"fetch\");\n//         return JSON.parse(localStorage.getItem('cart'));\n//     } else {\n//         return [];\n//     }\n// }\n// const storeInLocalStorage = (data) => {\n    \n//     localStorage.setItem('cart', JSON.stringify(data));\n//     // console.log(data);\n// }\n\n// const initialState = {\n//     carts: fetchFromLocalStorage(),\n//     itemsCount: 0,\n//     totalAmount: 0,\n//     isCartMessageOn: false\n// }\n\n// const cartSlice = createSlice({\n//     name: 'cart',\n//     initialState,\n//     reducers: {\n//         addToCart: (state, action) => {\n//             const isItemInCart = state.carts.find(item => item.id === action.payload.id);\n\n//             if(isItemInCart){\n//                 const tempCart = state.carts.map(item => {\n//                     if(item.id === action.payload.id){\n//                         let tempQty = item.quantity + action.payload.quantity;\n//                         let tempTotalPrice = tempQty * item.price;\n\n//                         return {\n//                             ...item, quantity: tempQty, totalPrice: tempTotalPrice\n//                         }\n//                     } else {\n//                         return item;\n//                     }\n//                 });\n\n//                 state.carts = tempCart;\n//                 storeInLocalStorage(state.carts);\n//             } else {\n//                 state.carts.push(action.payload);\n//                 storeInLocalStorage(state.carts);\n//             }\n//         },\n//     }\n// })\n// export const {addToCart}=cartSlice.actions;\n// export default cartSlice.reducer;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}