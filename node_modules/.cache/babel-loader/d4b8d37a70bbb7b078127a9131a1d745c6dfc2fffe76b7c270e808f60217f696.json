{"ast":null,"code":"// import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n// import { BASE_URL } from \"../utils/apiURL\";\n// import { STATUS } from \"../utils/status\";\n\n// const initialState = {\n//   searchProducts: [],\n//   searchProductsStatus: STATUS.IDLE,\n// };\n\n// const searchSlice = createSlice({\n//   name: \"search\",\n//   initialState,\n//   reducers: {},\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(fetchAsyncSearchProduct.pending, (state, action) => {\n//         state.searchProductsStatus = STATUS.LOADING;\n//       })\n\n//       .addCase(fetchAsyncSearchProduct.fulfilled, (state, action) => {\n//         state.searchProducts = action.payload;\n//         state.searchProductsStatus = STATUS.SUCCEEDED;\n//       })\n\n//       .addCase(fetchAsyncSearchProduct.rejected, (state, action) => {\n//         state.searchProductsStatus = STATUS.FAILED;\n//       });\n//   },\n// });\n// export const fetchAsyncSearchProduct = createAsyncThunk(\n//   \"product-search/fetch\",\n//   async (searchTerm) => {\n//     const response = await fetch(`${BASE_URL}products/search?q=${searchTerm}`);\n\n//     const data = await response.json();\n\n//     return data.products;\n//   }\n// );\n\n// export const getSearchProducts = (state) => state.searchProducts;\n// export const getSearchProductsStatus = (state) => state.searchProductsStatus;\n// export const { setSearchTerm, clearSearch } = searchSlice.actions;\n// export default searchSlice.reducer;","map":{"version":3,"names":[],"sources":["/Users/khushiverma/Desktop/Ecommerce-Website/shoppingcart/src/store/SearchSlice.js"],"sourcesContent":["// import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n// import { BASE_URL } from \"../utils/apiURL\";\n// import { STATUS } from \"../utils/status\";\n\n// const initialState = {\n//   searchProducts: [],\n//   searchProductsStatus: STATUS.IDLE,\n// };\n\n// const searchSlice = createSlice({\n//   name: \"search\",\n//   initialState,\n//   reducers: {},\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(fetchAsyncSearchProduct.pending, (state, action) => {\n//         state.searchProductsStatus = STATUS.LOADING;\n//       })\n\n//       .addCase(fetchAsyncSearchProduct.fulfilled, (state, action) => {\n//         state.searchProducts = action.payload;\n//         state.searchProductsStatus = STATUS.SUCCEEDED;\n//       })\n\n//       .addCase(fetchAsyncSearchProduct.rejected, (state, action) => {\n//         state.searchProductsStatus = STATUS.FAILED;\n//       });\n//   },\n// });\n// export const fetchAsyncSearchProduct = createAsyncThunk(\n//   \"product-search/fetch\",\n//   async (searchTerm) => {\n//     const response = await fetch(`${BASE_URL}products/search?q=${searchTerm}`);\n\n//     const data = await response.json();\n\n//     return data.products;\n//   }\n// );\n\n// export const getSearchProducts = (state) => state.searchProducts;\n// export const getSearchProductsStatus = (state) => state.searchProductsStatus;\n// export const { setSearchTerm, clearSearch } = searchSlice.actions;\n// export default searchSlice.reducer;\n\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}